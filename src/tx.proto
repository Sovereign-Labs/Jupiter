syntax = "proto3";
package blob;

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
import "google/api/annotations.proto";

option go_package = "github.com/celestiaorg/celestia-app/x/blob/types";

// Msg defines the blob Msg service.
service Msg {
  // PayForBlob allows the user to pay for the inclusion of a blob
  rpc PayForBlob(MsgPayForBlob) returns (MsgPayForBlobResponse) {
    option (google.api.http).get = "/celestia/blob/payforblob";
  }
}

// MsgWirePayForBlob describes the format of data that is sent over the wire
// for each PayForBlob
message MsgWirePayForBlob {
  string signer = 1;
  bytes namespace_id = 2; // assume this is 8 bytes!
  uint64 blob_size = 3;
  bytes blob = 4;
  // field number 6 is obsolete and was used for `repeated
  // ShareCommitAndSignature` when a MsgWirePayForBlob included multiple
  // blob share commitments (one per square size).
  ShareCommitAndSignature share_commitment = 7;
  // share_version is the version of the share format that the blob in this
  // message should use when included in a block. The share_version specified
  // must match the share_version used to generate the share_commitment in this
  // message.
  uint32 share_version = 8;
}

// MsgWirePayForBlobResponse describes the response returned after the
// submission of a WirePayForBlob
message MsgWirePayForBlobResponse {}

// ShareCommitAndSignature defines the
message ShareCommitAndSignature {
  // share_commitment is the root of a binary Merkle tree that has leaves which
  // are subtree roots of the relevant blob shares in the original data
  // square.
  bytes share_commitment = 2;
  bytes signature = 3; // signature on one SignedTransactionPayForBlob
}

// MsgPayForBlob is what gets signed by users when creating
// ShareCommitSignatures. It is a subset of MsgWirePayForBlob that does not contain the blob.
message MsgPayForBlob {
  string signer = 1;
  bytes namespace_id = 2;
  uint64 blob_size = 3;
  // share_commitment is the share_commitment from
  // ShareCommitAndSignature that will be included in a block
  bytes share_commitment = 4;
  // share_version is the version of the share format that the blob associated
  // with this message should use when included in a block. The share_version
  // specified must match the share_version used to generate the
  // share_commitment in this message.
  uint32 share_version = 8;
}

// MsgPayForBlobResponse describes the response returned after the submission
// of a PayForBlob
message MsgPayForBlobResponse {}
